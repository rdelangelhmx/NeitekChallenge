@page "/metas"

@inject IMetasService metasService
@inject ITareasService tareasService
@inject ToastService toastService
@inject PreloadService preloadService
<PageTitle>Metas</PageTitle>

<div class="top-row p-2 bg-white mb-2 border-3 border-start border-success">   
    <h4 class="mt-2"><i class="bi bi-list-task"></i> Control de Metas</h4>
</div>

<div class="card">
    <div class="card-body">
        <div class="row">
            <div class="col-4">
                <div class="row mb-2">
                    <button class="btn btn-success col-5" @onclick=AddNewMeta><span class="bi bi-plus-lg"></span> Nueva Meta</button>
                </div>
                <div class="row mb-2 w-100 p-0 table-success">
                @foreach (var meta in metasList)
                {
                    <MetasRow dataMetas="meta" OnSelect="OnSelectMeta" OnEdit="OnEditMeta" OnDelete="OnDeleteMeta" />
                }
                </div>
            </div>
            <div class="col-8">
                <div class="card @showMeta">
                    <div class="card-header bg-success text-white">@sMeta.Nombre</div>
                    <div class="card-body">
                        <div class="row mb-2">
                            <div class="col-3">
                                <button class="btn btn-success w-100 px-1 @showMeta" @onclick=AddNewTarea><span class="bi bi-plus-lg"></span> Agregar Tarea</button>
                            </div>
                            <div class="col-3">
                                <button class="btn btn-success w-100 px-1 @showSelected" @onclick=OnCompletarTarea><span class="bi bi-check-circle"></span> Completar Tarea</button>
                            </div>
                            <div class="col-3">
                                <button class="btn btn-success w-100 px-1 @showSelected" @onclick=OnEditarTarea><span class="bi bi-pencil"></span> Editar Tarea</button>
                            </div>
                            <div class="col-3">
                                <button class="btn btn-success w-100 px-1 @showSelected" @onclick=OnEliminarTarea><span class="bi bi-trash"></span> Eliminar Tarea</button>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-12">
                                <Grid @ref=grid TItem="TareasModel"
                                      Class="table table-hover table-bordered table-striped w-100" 
                                      Data="tareasList"
                                      AllowFiltering="true"
                                      AllowPaging="true"
                                      PageSize="5"
                                      AllowSorting="true"
                                      AllowSelection="true"
                                      SelectionMode="GridSelectionMode.Multiple"
                                      SelectedItemsChanged="OnSelectedItemsChanged"
                                      EmptyText="No hay registros para mostrar"
                                      Responsive="true">
                                    <GridColumns>
                                        <GridColumn TItem="TareasModel" HeaderText="" PropertyName="Favorita" SortKeySelector="item => item.Favorita">
                                            <button type="button" class="btn btn-sm" @onclick="@(() => OnFavoritaTarea(context))">
                                            @if(context.Favorita!.Value)
                                            {
                                                <i class="bi bi-star-fill text-warning"></i>
                                            }
                                            else
                                            {
                                                <i class="bi bi-star"></i>
                                            }
                                            </button>
                                        </GridColumn>
                                        <GridColumn TItem="TareasModel" HeaderText="Tarea" PropertyName="Nombre" SortKeySelector="item => item.Nombre">
                                            @context.Nombre
                                        </GridColumn>
                                        <GridColumn TItem="TareasModel" HeaderText="Fecha" PropertyName="Creada" SortKeySelector="item => item.Creada">
                                            @context.Creada!.Value.ToString("dd/MM/yyyy")
                                        </GridColumn>
                                        <GridColumn TItem="TareasModel" HeaderText="Estado" PropertyName="Estado" SortKeySelector="item => item.Estado">
                                            @if (context.Estado!.Value)
                                            {
                                                <span class="text-success">Completada</span>
                                            }
                                            else
                                            {
                                                <span>Abierta</span>
                                            }
                                        </GridColumn>
                                    </GridColumns>
                                </Grid>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<Modal @ref="mMetas" IsVerticallyCentered="true" HeaderCssClass="bg-success text-white" />
<Modal @ref="mTareas" IsVerticallyCentered="true" HeaderCssClass="bg-success  text-white" />
<ConfirmDialog @ref="dialog" />

@code {
    public IEnumerable<MetasModel> metasList { get; set; } = new List<MetasModel>();
    public IEnumerable<TareasModel> tareasList { get; set; } = new List<TareasModel>();

    Grid<TareasModel> grid = default!;
    IEnumerable<TareasModel> sTareas { get; set; } = new List<TareasModel>();

    Modal mMetas = default!;
    Modal mTareas = default!;

    string showMeta = "hidden";
    string showSelected = "hidden";
    MetasModel sMeta = new();
    TareasModel sTarea = new();
    ConfirmDialog dialog = default!;

    protected override async Task OnInitializedAsync()
    {
        preloadService.Show(SpinnerColor.Light, "Cargando Metas...");
        StateHasChanged();
        try
        {
            // Load Metas
            var result = await metasService.GetAllAsync();
            if (result is null)
                throw new Exception("No se encontraron registros");
            metasList = result;
            await OnSelectMeta(metasList.First());
        }
        catch (Exception ex)
        {
            metasList = new List<MetasModel>();
            toastService.Notify(new(ToastType.Danger, ex.Message));
        }
        finally
        {
            preloadService.Hide();
            StateHasChanged();
            base.OnInitialized();
        }
    }

    private async Task AddNewMeta()
    {
        var parameters = new Dictionary<string, object>();
        parameters.Add("dataMetas", new MetasModel());
        parameters.Add("OnCloseCallback", EventCallback.Factory.Create<MouseEventArgs>(this, CloseMetas));
        await mMetas.ShowAsync<MetasForm>(title: "Agregar nueva Meta", parameters: parameters);
    }

    private async Task CloseMetas(MouseEventArgs e)
    {
        await mMetas.HideAsync();
    }

    private async Task OnSelectMeta(MetasModel metasModel)
    {
        showMeta = "show";
        showSelected = "hidden";
        sMeta = metasModel;
        tareasList = metasModel.Tareas;
        grid.Data = tareasList;
        await grid.RefreshDataAsync();
        StateHasChanged();
    }

    private async Task OnEditMeta(MetasModel metasModel)
    {
        var parameters = new Dictionary<string, object>();
        parameters.Add("dataMetas", metasModel);
        parameters.Add("OnCloseCallback", EventCallback.Factory.Create<MouseEventArgs>(this, CloseMetas));
        await mMetas.ShowAsync<MetasForm>(title: "Editar Meta", parameters: parameters);
    }

    private async Task OnDeleteMeta(MetasModel metasModel)
    {
        try
        {
            var options = new ConfirmDialogOptions
                {
                    YesButtonText = "Aceptar",
                    YesButtonColor = ButtonColor.Success,
                    NoButtonText = "Cancelar",
                    NoButtonColor = ButtonColor.Secondary, 
                    HeaderCssClass = "bg-success text-white", 
                    DialogCssClass = "text-center",
                    IsVerticallyCentered = true
                };

            var confirmation = await dialog.ShowAsync(
                title: "¿Está seguro?",
                message1: $"Que desea eliminar la Meta: {metasModel.Nombre}",
                confirmDialogOptions: options);

            if (confirmation)
            {
                var result = await metasService.DeleteAsync(metasModel);
                if (result is not null)
                {
                    toastService.Notify(new(ToastType.Success, $"El registro se ha eliminado"));
                    metasList = metasList!.Where(w => w.MetaId != metasModel.MetaId);
                }
                else
                    toastService.Notify(new(ToastType.Danger, $"No se puede eliminar el registro"));
            }
        }
        catch (Exception ex)
        {
            toastService.Notify(new(ToastType.Danger, ex.Message));
        }
    }

    private async Task AddNewTarea()
    {
        var parameters = new Dictionary<string, object>();
        parameters.Add("dataTareas", new TareasModel());
        parameters.Add("OnCloseCallback", EventCallback.Factory.Create<MouseEventArgs>(this, CloseTareas));
        await mTareas.ShowAsync<TareasForm>(title: "Agregar nueva Tarea", parameters: parameters);
    }

    private async Task CloseTareas(MouseEventArgs e)
    {
        await mTareas.HideAsync();
    }

    private async Task OnFavoritaTarea(TareasModel tarea)
    {
        try
        {
            tarea.Favorita = !tarea.Favorita;
            var result = await tareasService.UpdateAsync(tarea);
            if (result is not null)
                toastService.Notify(new(ToastType.Success, $"Se ha actualizado la Tarea: {tarea.Nombre}"));
            else
                throw new Exception($"No se puede actualizar la Tarea: {tarea.Nombre}");
        }
        catch (Exception ex)
        {
            toastService.Notify(new(ToastType.Danger, ex.Message));
        }
    }

    private async Task OnCompletarTarea()
    {
        try
        {
            foreach (var tarea in sTareas)
            {
                tarea.Estado = !tarea.Estado;
                var result = await tareasService.UpdateAsync(tarea);
                if (result is not null)
                    toastService.Notify(new(ToastType.Success, $"Se ha actualizado la Tarea: {tarea.Nombre}"));
                else
                    throw new Exception($"No se puede actualizar la Tarea: {tarea.Nombre}");
            }
        }
        catch (Exception ex)
        {
            toastService.Notify(new(ToastType.Danger, ex.Message));
        }
    }

    private async Task OnEditarTarea()
    {
        var parameters = new Dictionary<string, object>();
        parameters.Add("dataTareas", sTarea);
        parameters.Add("OnCloseCallback", EventCallback.Factory.Create<MouseEventArgs>(this, CloseTareas));
        await mTareas.ShowAsync<TareasForm>(title: "Editar Tarea", parameters: parameters);
    }

    private async Task OnEliminarTarea()
    {
        var options = new ConfirmDialogOptions
            {
                YesButtonText = "Aceptar",
                YesButtonColor = ButtonColor.Success,
                NoButtonText = "Cancelar",
                NoButtonColor = ButtonColor.Secondary,
                HeaderCssClass = "bg-success text-white",
                DialogCssClass = "text-center",
                IsVerticallyCentered = true
            };

        var confirmation = await dialog.ShowAsync(
            title: "¿Está seguro?",
            message1: $"Que desea eliminar la Tarea: {sTarea.Nombre}",
            confirmDialogOptions: options);

        if (confirmation)
        {
            var result = await tareasService.DeleteAsync(sTarea);
            if (result is not null)
                toastService.Notify(new(ToastType.Success, $"El registro se ha eliminado"));
            else
                toastService.Notify(new(ToastType.Danger, $"No se puede eliminar el registro"));
        }
    }

    private Task OnSelectedItemsChanged(HashSet<TareasModel> tarea)
    {
        sTareas = tarea.ToList();
        showSelected = sTareas.Count() > 0 ? "show" : "hidden";
        return Task.CompletedTask;
    }
}
